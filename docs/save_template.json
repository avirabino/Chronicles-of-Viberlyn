// Example structure for a save file (e.g., save_game_01.json or a database record)
{
  "save_id": "unique_save_identifier_or_timestamp", // e.g., "slot1", "autosave_20250413_180000"
  "save_name": "Oakhaven Mine Entrance", // Player-given name or auto-generated description
  "story_uuid": "a1b2c3d4-e5f6-7890-1234-567890abcdef", // UUID of the story being played
  "save_time_utc": "2025-04-13T15:45:00Z", // ISO 8601 timestamp
  "play_time_seconds": 3600, // Total seconds played on this save

  "game_world_state": {
    "current_map_id": "Oakhaven_And_Surrounds_POC", // ID of the map the player is currently on
    "current_time": { // In-game time
        "day": 1,
        "hour": 14, // e.g., 2 PM
        "minute": 30
    },
    "map_object_states": {
        // Store states ONLY for objects that have changed from their default definition
        // Key: instance_id from map.json, Value: object containing changed state properties
        "Mayor_House_Door": {
            "current_state": "closed_unlocked" // e.g., if player unlocked it
        },
        "Abandoned_Mine_Chest": {
            "current_state": "open_looted", // e.g., if player opened and looted it
            "loot_table_id": null // Mark as looted if loot is instance-based
        },
        "Mine_Entrance_Barrier": {
            "current_hp": 5, // If damaged but not destroyed
            "current_state": "damaged"
        }
    },
    "world_variables": {
        // Store any global flags or variables that change during gameplay
        "relic_influence_level": 1 // Example: Level increases as player progresses?
    }
  },

  "player_state": {
    "class_id": "ranger", // Player's chosen class
    "level": 2,
    "xp": 350,
    "location": { // Player's current position
        "map_id": "Oakhaven_And_Surrounds_POC",
        "x": 10,
        "y": 11
    },
    "current_stats": { // Snapshot of dynamic stats
        "hp": 18,
        "max_hp": 20
        // Add mp, stamina, etc. if applicable
    },
    "attributes": { // Base attributes (may not need saving if derived from class/level)
        "strength": 12, "dexterity": 15, "constitution": 13, "intelligence": 10, "wisdom": 14, "charisma": 8
    },
    "inventory": [ // List of items currently held
        {"item_id": "simple_shortbow", "quantity": 1},
        {"item_id": "arrows_bundle", "quantity": 1, "current_ammo": 7}, // Track ammo within the bundle
        {"item_id": "leather_armor", "quantity": 1, "equipped": true}, // Flag equipped items
        {"item_id": "relic_fragment", "quantity": 1},
        {"item_id": "minor_healing_potion", "quantity": 3},
        {"item_id": "rusty_spade", "quantity": 1}
    ],
    "active_effects": [ // Temporary effects on the player
        // {"effect_id": "relic_fragment_unease", "duration_turns": -1} // -1 for permanent while holding
    ],
    "proficiencies": { // Learned skills/proficiencies if different from starting class
        "skills": ["stealth", "survival", "perception", "mining"] // Example if player learned mining
    }
  },

  "quest_states": {
    // Store status ONLY for quests the player has interacted with (Not Started, Active, Completed, Failed)
    // Key: quest_id from quests.json/md
    "mq1_elderglow_mystery": {
      "status": "Active",
      "steps_status": { // Status of each step within the quest
        "mq1_1_talk_mayor": "Completed",
        "mq1_2_talk_miner": "Completed",
        "mq1_3_investigate_mine": "Active",
        "mq1_4_enter_mine": "Not Started",
        "mq1_5_confront_source": "Not Started",
        "mq1_6_secure_relic": "Not Started",
        "mq1_7_report_mayor": "Not Started"
      },
      "dynamic_log": [ // Optional: Store player-specific log entries generated by AI DM
          "The Mayor seemed genuinely worried when he asked for my help."
      ]
    },
    "sq1_lost_tools": {
      "status": "Completed",
      "steps_status": {
        "sq1_1_accept_task": "Completed",
        "sq1_2_find_pickaxe": "Completed",
        "sq1_3_return_pickaxe": "Completed"
      },
      "dynamic_log": []
    }
    // Only include quests the player has started or completed
  },

  "npc_states": {
    // Store dynamic states ONLY for NPCs whose state differs from their default in characters.json
    // Key: character_id from characters.json
    "miner_greg": {
      "current_location": {"map_id": "Oakhaven_And_Surrounds_POC", "x": 11, "y": 11}, // Example if he moved after quest
      "mood": "Grateful", // Example mood change tracked by AI DM
      "has_met_player": true
    },
    "mayor_baldrin": {
        "has_met_player": true
    }
  },

  "reputation": { // Player's standing with factions
    "Oakhaven_Village": 20, // Updated after side quest + main quest reward
    "Verdant_Concord": 0,
    "Crimson_Empire": 0,
    "Cerulean_Society": 0
  }
}